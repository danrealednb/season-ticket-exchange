// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  email     String         @unique
  password  String
  role      Role           @default(USER)
  firstName String         @default("")
  lastName  String         @default("")
  verified  VerifiedStatus @default(NOT_VERIFIED)
  paypal    String         @default("")
  zelle     String         @default("")
  venmo     String         @default("")
  section   String         @default("")
  row       String         @default("")
  seats     String         @default("")
  price     Int            @default(0)
  Ticket    Ticket[]
  // ReservedTickets ReservedTickets[]
}

enum Role {
  USER
  ADMIN
}

model Ticket {
  id                   String       @id @default(auto()) @map("_id") @db.ObjectId
  game                 Int
  section              String
  row                  String
  seats                String[]
  price                Int          @default(0)
  aisleSeat            Boolean      @default(false)
  discountCodeIncluded Boolean      @default(false)
  status               TicketStatus
  user                 User         @relation(fields: [userId], references: [id])
  userId               String       @db.ObjectId
  // userVerified         Boolean
  dateAdded            DateTime     @default(now())
  notes                String       @default("")
  // reservedUser         String       @default("") @db.ObjectId
  buyer                String       @default("")
  seller               String       @default("")
  totalPrice           Int          @default(0)
  gameDate             DateTime
  suite                Boolean      @default(false)
  chaseBridge          Boolean      @default(false)
  paid                 PaidStatus   @default(AVAILABLE)
  // ReservedTickets      ReservedTickets[]
}

enum TicketStatus {
  AVAILABLE
  PENDING
  RESERVED
  SOLD
}

enum PaidStatus {
  AVAILABLE // tickets are still available and not been reserved yet
  PENDING_PAYMENT // buyer just reserved and nothing else happend yet
  PENDING_SELLER_ACCEPTANCE // buyer sent payment via venmo and waiting for seller to acknowledge
  PAYMENT_COMPLETE // seller has received payment and transaction is complete
}

enum VerifiedStatus {
  NOT_VERIFIED
  PENDING_VERIFICATION
  VERIFIED
}

// model ReservedTickets {
//   id       String  @id @default(auto()) @map("_id") @db.ObjectId
//   ticket   Ticket  @relation(fields: [ticketId], references: [id])
//   sellerId String  @db.ObjectId
//   buyerId  String  @db.ObjectId
//   User     User?   @relation(fields: [userId], references: [id])
//   userId   String? @db.ObjectId
//   ticketId String  @db.ObjectId
// }

model ReportedTickets {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  ticketId     String
  report       String
  reportedUser String
  dateAdded    DateTime @default(now())
}
